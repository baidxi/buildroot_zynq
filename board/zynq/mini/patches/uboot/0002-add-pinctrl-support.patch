Index: b/drivers/pinctrl/Kconfig
===================================================================
--- a/drivers/pinctrl/Kconfig
+++ b/drivers/pinctrl/Kconfig
@@ -342,6 +342,15 @@ config PINCTRL_ZYNQMP
 	  Generic Pinctrl framework and is compatible with the Linux driver,
 	  i.e. it uses the same device tree configuration.
 
+config PINCTRL_ZYNQ
+	bool "Xilinx Zynq pin control driver"
+	depends on DM && PINCTRL_GENERIC && ARCH_ZYNQ
+	default y
+	help
+	  Support pin multiplexing control on Xilinx Zynq. The driver uses
+	  Generic Pinctrl framework and is compatible with the Linux driver,
+	  i.e. it uses the same device tree configuration.
+
 endif
 
 source "drivers/pinctrl/broadcom/Kconfig"
Index: b/drivers/pinctrl/Makefile
===================================================================
--- a/drivers/pinctrl/Makefile
+++ b/drivers/pinctrl/Makefile
@@ -32,3 +32,4 @@ obj-$(CONFIG_PINCTRL_STM32)	+= pinctrl_s
 obj-$(CONFIG_$(SPL_)PINCTRL_STMFX)	+= pinctrl-stmfx.o
 obj-y				+= broadcom/
 obj-$(CONFIG_PINCTRL_ZYNQMP)	+= pinctrl-zynqmp.o
+obj-$(CONFIG_PINCTRL_ZYNQ)		+= pinctrl-zynq.o
Index: b/drivers/pinctrl/pinctrl-zynq.c
===================================================================
--- /dev/null
+++ b/drivers/pinctrl/pinctrl-zynq.c
@@ -0,0 +1,1061 @@
+#include "linux/kernel.h"
+#include <common.h>
+#include <dm.h>
+#include <errno.h>
+#include <malloc.h>
+#include <zynqmp_firmware.h>
+#include <asm/arch/sys_proto.h>
+#include <asm/io.h>
+#include <dm/device_compat.h>
+#include <dm/pinctrl.h>
+#include <linux/compat.h>
+#include <mach/hardware.h>
+
+#define ZYNQ_PINMUX_MUX_SHIFT   1
+#define ZYNQ_PINMUX_MUX_MASK    (0x7f << ZYNQ_PINMUX_MUX_SHIFT)
+
+#define IO_STANDARD_LVCOMS18    1
+#define IO_STANDARD_LVCOMS25    2
+#define IO_STANDARD_LVCOMS33    3
+#define IO_STANDARD_HSTL        4
+
+#define SLEW_RATE_FAST		1
+#define SLEW_RATE_SLOW		0
+
+extern void zynq_slcr_unlock(void);
+extern void zynq_slcr_lock(void);
+
+struct zynq_pin_desc {
+    unsigned number;
+    const char *name;
+    void *drv_data;
+};
+
+struct zynq_pinctrl_group {
+    const char *name;
+    const unsigned int *pins;
+    const unsigned int npins;
+};
+
+struct zynq_pinmux_function {
+    const char *name;
+    const char * const *groups;
+    unsigned int ngroups;
+    unsigned int mux_val;
+    u32 mux;
+    u32 mux_mask;
+    u8 mux_shift;
+};
+
+struct zynq_pinctrl_priv {
+    u32 offset;
+    u32 syscon_base;
+    const struct zynq_pinctrl_group *groups;
+    unsigned int ngroups;
+    const struct zynq_pinmux_function *funcs;
+    unsigned int nfuncs;
+    const struct zynq_pin_desc *pins;
+    unsigned int npins;
+};
+
+struct zynq_pinctrl_config {
+	u32 slew;
+	u32 bias;
+	u32 pull_ctrl;
+	u32 input_type;
+	u32 drive_strength;
+	u32 volt_sts;
+	u32 tri_state;
+};
+
+enum zynq_pinmux_functions {
+    ZYNQ_PINMUX_can0,
+    ZYNQ_PINMUX_can1,
+    ZYNQ_PINMUX_ethernet0,
+    ZYNQ_PINMUX_ethernet1,
+    ZYNQ_PINMUX_gpio0,
+    ZYNQ_PINMUX_i2c0,
+    ZYNQ_PINMUX_i2c1,
+    ZYNQ_PINMUX_mdio0,
+    ZYNQ_PINMUX_mdio1,
+    ZYNQ_PINMUX_qspi0,
+    ZYNQ_PINMUX_qspi1,
+    ZYNQ_PINMUX_qspi_fbclk,
+    ZYNQ_PINMUX_qspi_cs1,
+    ZYNQ_PINMUX_spi0,
+    ZYNQ_PINMUX_spi1,
+    ZYNQ_PINMUX_spi0_ss,
+    ZYNQ_PINMUX_spi1_ss,
+    ZYNQ_PINMUX_sdio0,
+    ZYNQ_PINMUX_sdio0_pc,
+    ZYNQ_PINMUX_sdio0_cd,
+    ZYNQ_PINMUX_sdio0_wp,
+    ZYNQ_PINMUX_sdio1,
+    ZYNQ_PINMUX_sdio1_pc,
+    ZYNQ_PINMUX_sdio1_cd,
+    ZYNQ_PINMUX_sdio1_wp,
+    ZYNQ_PINMUX_smc0_nor,
+    ZYNQ_PINMUX_smc0_nor_cs1,
+    ZYNQ_PINMUX_smc0_nor_addr25,
+    ZYNQ_PINMUX_smc0_nand,
+    ZYNQ_PINMUX_ttc0,
+    ZYNQ_PINMUX_ttc1,
+    ZYNQ_PINMUX_uart0,
+    ZYNQ_PINMUX_uart1,
+    ZYNQ_PINMUX_usb0,
+    ZYNQ_PINMUX_usb1,
+    ZYNQ_PINMUX_swdt0,
+    ZYNQ_PINMUX_MAX_FUNC
+};
+
+#define PINCTRL_PIN(a, b)   {   .number = a, .name = b }
+
+static const struct zynq_pin_desc zynq_pins[] = {
+    PINCTRL_PIN(0,  "MIO0"),
+    PINCTRL_PIN(1,  "MIO1"),
+    PINCTRL_PIN(2,  "MIO2"),
+    PINCTRL_PIN(3,  "MIO3"),
+    PINCTRL_PIN(4,  "MIO4"),
+    PINCTRL_PIN(5,  "MIO5"),
+    PINCTRL_PIN(6,  "MIO6"),
+    PINCTRL_PIN(7,  "MIO7"),
+    PINCTRL_PIN(8,  "MIO8"),
+    PINCTRL_PIN(9,  "MIO9"),
+    PINCTRL_PIN(10, "MIO10"),
+    PINCTRL_PIN(11, "MIO11"),
+    PINCTRL_PIN(12, "MIO12"),
+    PINCTRL_PIN(13, "MIO13"),
+    PINCTRL_PIN(14, "MIO14"),
+    PINCTRL_PIN(15, "MIO15"),
+    PINCTRL_PIN(16, "MIO16"),
+    PINCTRL_PIN(17, "MIO17"),
+    PINCTRL_PIN(18, "MIO18"),
+    PINCTRL_PIN(19, "MIO19"),
+    PINCTRL_PIN(20, "MIO20"),
+    PINCTRL_PIN(21, "MIO21"),
+    PINCTRL_PIN(22, "MIO22"),
+    PINCTRL_PIN(23, "MIO23"),
+    PINCTRL_PIN(24, "MIO24"),
+    PINCTRL_PIN(25, "MIO25"),
+    PINCTRL_PIN(26, "MIO26"),
+    PINCTRL_PIN(27, "MIO27"),
+    PINCTRL_PIN(28, "MIO28"),
+    PINCTRL_PIN(29, "MIO29"),
+    PINCTRL_PIN(30, "MIO30"),
+    PINCTRL_PIN(31, "MIO31"),
+    PINCTRL_PIN(32, "MIO32"),
+    PINCTRL_PIN(33, "MIO33"),
+    PINCTRL_PIN(34, "MIO34"),
+    PINCTRL_PIN(35, "MIO35"),
+    PINCTRL_PIN(36, "MIO36"),
+    PINCTRL_PIN(37, "MIO37"),
+    PINCTRL_PIN(38, "MIO38"),
+    PINCTRL_PIN(39, "MIO39"),
+    PINCTRL_PIN(40, "MIO40"),
+    PINCTRL_PIN(41, "MIO41"),
+    PINCTRL_PIN(42, "MIO42"),
+    PINCTRL_PIN(43, "MIO43"),
+    PINCTRL_PIN(44, "MIO44"),
+    PINCTRL_PIN(45, "MIO45"),
+    PINCTRL_PIN(46, "MIO46"),
+    PINCTRL_PIN(47, "MIO47"),
+    PINCTRL_PIN(48, "MIO48"),
+    PINCTRL_PIN(49, "MIO49"),
+    PINCTRL_PIN(50, "MIO50"),
+    PINCTRL_PIN(51, "MIO51"),
+    PINCTRL_PIN(52, "MIO52"),
+    PINCTRL_PIN(53, "MIO53"),
+    PINCTRL_PIN(54, "EMIO_SD0_WP"),
+    PINCTRL_PIN(55, "EMIO_SD0_CD"),
+    PINCTRL_PIN(56, "EMIO_SD1_WP"),
+    PINCTRL_PIN(57, "EMIO_SD1_CD"),
+};
+
+static const unsigned int ethernet0_0_pins[] = {16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27};
+static const unsigned int ethernet1_0_pins[] = {28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39};
+static const unsigned int mdio0_0_pins[] = {52, 53};
+static const unsigned int mdio1_0_pins[] = {52, 53};
+static const unsigned int qspi0_0_pins[] = {1, 2, 3, 4, 5, 6};
+static const unsigned int qspi1_0_pins[] = {9, 10, 11, 12, 13};
+static const unsigned int qspi_cs1_pins[] = {0};
+static const unsigned int qspi_fbclk_pins[] = {8};
+static const unsigned int spi0_0_pins[] = {16, 17, 21};
+static const unsigned int spi0_0_ss0_pins[] = {18};
+static const unsigned int spi0_0_ss1_pins[] = {19};
+static const unsigned int spi0_0_ss2_pins[] = {20};
+static const unsigned int spi0_1_pins[] = {28, 29, 33};
+static const unsigned int spi0_1_ss0_pins[] = {30};
+static const unsigned int spi0_1_ss1_pins[] = {31};
+static const unsigned int spi0_1_ss2_pins[] = {32};
+static const unsigned int spi0_2_pins[] = {40, 41, 45};
+static const unsigned int spi0_2_ss0_pins[] = {42};
+static const unsigned int spi0_2_ss1_pins[] = {43};
+static const unsigned int spi0_2_ss2_pins[] = {44};
+static const unsigned int spi1_0_pins[] = {10, 11, 12};
+static const unsigned int spi1_0_ss0_pins[] = {13};
+static const unsigned int spi1_0_ss1_pins[] = {14};
+static const unsigned int spi1_0_ss2_pins[] = {15};
+static const unsigned int spi1_1_pins[] = {22, 23, 24};
+static const unsigned int spi1_1_ss0_pins[] = {25};
+static const unsigned int spi1_1_ss1_pins[] = {26};
+static const unsigned int spi1_1_ss2_pins[] = {27};
+static const unsigned int spi1_2_pins[] = {34, 35, 36};
+static const unsigned int spi1_2_ss0_pins[] = {37};
+static const unsigned int spi1_2_ss1_pins[] = {38};
+static const unsigned int spi1_2_ss2_pins[] = {39};
+static const unsigned int spi1_3_pins[] = {46, 47, 48, 49};
+static const unsigned int spi1_3_ss0_pins[] = {49};
+static const unsigned int spi1_3_ss1_pins[] = {50};
+static const unsigned int spi1_3_ss2_pins[] = {51};
+
+static const unsigned int sdio0_0_pins[] = {16, 17, 18, 19, 20, 21};
+static const unsigned int sdio0_1_pins[] = {28, 29, 30, 31, 32, 33};
+static const unsigned int sdio0_2_pins[] = {40, 41, 42, 43, 44, 45};
+static const unsigned int sdio1_0_pins[] = {10, 11, 12, 13, 14, 15};
+static const unsigned int sdio1_1_pins[] = {22, 23, 24, 25, 26, 27};
+static const unsigned int sdio1_2_pins[] = {34, 35, 36, 37, 38, 39};
+static const unsigned int sdio1_3_pins[] = {46, 47, 48, 49, 50, 51};
+static const unsigned int sdio0_emio_wp_pins[] = {54};
+static const unsigned int sdio0_emio_cd_pins[] = {55};
+static const unsigned int sdio1_emio_wp_pins[] = {56};
+static const unsigned int sdio1_emio_cd_pins[] = {57};
+
+static const unsigned int smc0_nor_pins[] = {0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13,
+                                             15, 16, 17, 18, 19, 20, 21, 22, 23,
+                                             24, 25, 26, 27, 28, 29, 30, 31, 32,
+                                             33, 34, 35, 36, 37, 38, 39};
+static const unsigned int smc0_nor_cs1_pins[] = {1};
+static const unsigned int smc0_nor_addr25_pins[] = {1};
+static const unsigned int smc0_nand_pins[] = {0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
+                                              12, 13, 14, 15, 16, 17, 18, 19, 20,
+                                              21, 22, 23};
+static const unsigned int smc0_nand8_pins[] = {0, 2, 3, 4, 5, 6, 7,
+                                               8, 9, 10, 11, 12, 13, 14};
+
+static const unsigned int can0_0_pins[] = {10, 11};
+static const unsigned int can0_1_pins[] = {14, 15};
+static const unsigned int can0_2_pins[] = {18, 19};
+static const unsigned int can0_3_pins[] = {22, 23};
+static const unsigned int can0_4_pins[] = {26, 27};
+static const unsigned int can0_5_pins[] = {30, 31};
+static const unsigned int can0_6_pins[] = {34, 35};
+static const unsigned int can0_7_pins[] = {38, 39};
+static const unsigned int can0_8_pins[] = {42, 43};
+static const unsigned int can0_9_pins[] = {46, 47};
+static const unsigned int can0_10_pins[] = {50, 51};
+
+static const unsigned int can1_0_pins[] = {8, 9};
+static const unsigned int can1_1_pins[] = {12, 13};
+static const unsigned int can1_2_pins[] = {16, 17};
+static const unsigned int can1_3_pins[] = {20, 21};
+static const unsigned int can1_4_pins[] = {24, 25};
+static const unsigned int can1_5_pins[] = {28, 29};
+static const unsigned int can1_6_pins[] = {32, 33};
+static const unsigned int can1_7_pins[] = {36, 37};
+static const unsigned int can1_8_pins[] = {40, 41};
+static const unsigned int can1_9_pins[] = {44, 45};
+static const unsigned int can1_10_pins[] = {48, 49};
+static const unsigned int can1_11_pins[] = {52, 53};
+
+static const unsigned int uart0_0_pins[] = {10, 11};
+static const unsigned int uart0_1_pins[] = {14, 15};
+static const unsigned int uart0_2_pins[] = {18, 19};
+static const unsigned int uart0_3_pins[] = {22, 21};
+static const unsigned int uart0_4_pins[] = {26, 27};
+static const unsigned int uart0_5_pins[] = {30, 31};
+static const unsigned int uart0_6_pins[] = {34, 35};
+static const unsigned int uart0_7_pins[] = {38, 39};
+static const unsigned int uart0_8_pins[] = {42, 43};
+static const unsigned int uart0_9_pins[] = {46, 47};
+static const unsigned int uart0_10_pins[] = {50, 51};
+
+static const unsigned int uart1_0_pins[] = {8, 9};
+static const unsigned int uart1_1_pins[] = {12, 13};
+static const unsigned int uart1_2_pins[] = {16, 17};
+static const unsigned int uart1_3_pins[] = {20, 21};
+static const unsigned int uart1_4_pins[] = {24, 25};
+static const unsigned int uart1_5_pins[] = {28, 29};
+static const unsigned int uart1_6_pins[] = {32, 33};
+static const unsigned int uart1_7_pins[] = {36, 37};
+static const unsigned int uart1_8_pins[] = {40, 41};
+static const unsigned int uart1_9_pins[] = {44, 45};
+static const unsigned int uart1_10_pins[] = {48, 49};
+static const unsigned int uart1_11_pins[] = {52, 53};
+
+static const unsigned int i2c0_0_pins[] = {10, 11};
+static const unsigned int i2c0_1_pins[] = {14, 15};
+static const unsigned int i2c0_2_pins[] = {18, 19};
+static const unsigned int i2c0_3_pins[] = {22, 23};
+static const unsigned int i2c0_4_pins[] = {26, 27};
+static const unsigned int i2c0_5_pins[] = {30, 31};
+static const unsigned int i2c0_6_pins[] = {34, 35};
+static const unsigned int i2c0_7_pins[] = {38, 39};
+static const unsigned int i2c0_8_pins[] = {42, 43};
+static const unsigned int i2c0_9_pins[] = {46, 47};
+static const unsigned int i2c0_10_pins[] = {50, 51};
+
+static const unsigned int i2c1_0_pins[] = {12, 13};
+static const unsigned int i2c1_1_pins[] = {16, 17};
+static const unsigned int i2c1_2_pins[] = {20, 21};
+static const unsigned int i2c1_3_pins[] = {24, 25};
+static const unsigned int i2c1_4_pins[] = {28, 29};
+static const unsigned int i2c1_5_pins[] = {32, 33};
+static const unsigned int i2c1_6_pins[] = {36, 37};
+static const unsigned int i2c1_7_pins[] = {40, 41};
+static const unsigned int i2c1_8_pins[] = {44, 45};
+static const unsigned int i2c1_9_pins[] = {48, 49};
+static const unsigned int i2c1_10_pins[] = {52, 53};
+
+static const unsigned int ttc0_0_pins[] = {18, 19};
+static const unsigned int ttc0_1_pins[] = {30, 31};
+static const unsigned int ttc0_2_pins[] = {42, 43};
+static const unsigned int ttc1_0_pins[] = {16, 17};
+static const unsigned int ttc1_1_pins[] = {28, 29};
+static const unsigned int ttc1_2_pins[] = {40, 41};
+
+static const unsigned int swdt0_0_pins[] = {14, 15};
+static const unsigned int swdt0_1_pins[] = {26, 27};
+static const unsigned int swdt0_2_pins[] = {38, 39};
+static const unsigned int swdt0_3_pins[] = {50, 51};
+static const unsigned int swdt0_4_pins[] = {52, 52};
+
+static const unsigned int gpio0_0_pins[] = {0};
+static const unsigned int gpio0_1_pins[] = {1};
+static const unsigned int gpio0_2_pins[] = {2};
+static const unsigned int gpio0_3_pins[] = {3};
+static const unsigned int gpio0_4_pins[] = {4};
+static const unsigned int gpio0_5_pins[] = {5};
+static const unsigned int gpio0_6_pins[] = {6};
+static const unsigned int gpio0_7_pins[] = {7};
+static const unsigned int gpio0_8_pins[] = {8};
+static const unsigned int gpio0_9_pins[] = {9};
+static const unsigned int gpio0_10_pins[] = {10};
+static const unsigned int gpio0_11_pins[] = {11};
+static const unsigned int gpio0_12_pins[] = {12};
+static const unsigned int gpio0_13_pins[] = {13};
+static const unsigned int gpio0_14_pins[] = {14};
+static const unsigned int gpio0_15_pins[] = {15};
+static const unsigned int gpio0_16_pins[] = {16};
+static const unsigned int gpio0_17_pins[] = {17};
+static const unsigned int gpio0_18_pins[] = {18};
+static const unsigned int gpio0_19_pins[] = {19};
+static const unsigned int gpio0_20_pins[] = {20};
+static const unsigned int gpio0_21_pins[] = {21};
+static const unsigned int gpio0_22_pins[] = {22};
+static const unsigned int gpio0_23_pins[] = {23};
+static const unsigned int gpio0_24_pins[] = {24};
+static const unsigned int gpio0_25_pins[] = {25};
+static const unsigned int gpio0_26_pins[] = {26};
+static const unsigned int gpio0_27_pins[] = {27};
+static const unsigned int gpio0_28_pins[] = {28};
+static const unsigned int gpio0_29_pins[] = {29};
+static const unsigned int gpio0_30_pins[] = {30};
+static const unsigned int gpio0_31_pins[] = {31};
+static const unsigned int gpio0_32_pins[] = {32};
+static const unsigned int gpio0_33_pins[] = {33};
+static const unsigned int gpio0_34_pins[] = {34};
+static const unsigned int gpio0_35_pins[] = {35};
+static const unsigned int gpio0_36_pins[] = {36};
+static const unsigned int gpio0_37_pins[] = {37};
+static const unsigned int gpio0_38_pins[] = {38};
+static const unsigned int gpio0_39_pins[] = {39};
+static const unsigned int gpio0_40_pins[] = {40};
+static const unsigned int gpio0_41_pins[] = {41};
+static const unsigned int gpio0_42_pins[] = {42};
+static const unsigned int gpio0_43_pins[] = {43};
+static const unsigned int gpio0_44_pins[] = {44};
+static const unsigned int gpio0_45_pins[] = {45};
+static const unsigned int gpio0_46_pins[] = {46};
+static const unsigned int gpio0_47_pins[] = {47};
+static const unsigned int gpio0_48_pins[] = {48};
+static const unsigned int gpio0_49_pins[] = {49};
+static const unsigned int gpio0_50_pins[] = {50};
+static const unsigned int gpio0_51_pins[] = {51};
+static const unsigned int gpio0_52_pins[] = {52};
+static const unsigned int gpio0_53_pins[] = {53};
+
+static const unsigned int usb0_0_pins[] = {28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39};
+static const unsigned int usb1_0_pins[] = {40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51};
+
+#define ZYNQ_PINCTRL_GRP(nm)    \
+    {\
+        .name = #nm "_grp", \
+        .pins = nm ## _pins,    \
+        .npins = ARRAY_SIZE(nm ## _pins),   \
+    }
+
+
+static const struct zynq_pinctrl_group zynq_pinctrl_groups[] = {
+    ZYNQ_PINCTRL_GRP(ethernet0_0),
+    ZYNQ_PINCTRL_GRP(ethernet1_0),
+    ZYNQ_PINCTRL_GRP(mdio0_0),
+    ZYNQ_PINCTRL_GRP(mdio1_0),
+    ZYNQ_PINCTRL_GRP(qspi0_0),
+    ZYNQ_PINCTRL_GRP(qspi1_0),
+    ZYNQ_PINCTRL_GRP(qspi_fbclk),
+    ZYNQ_PINCTRL_GRP(qspi_cs1),
+    ZYNQ_PINCTRL_GRP(spi0_0),
+    ZYNQ_PINCTRL_GRP(spi0_0_ss0),
+    ZYNQ_PINCTRL_GRP(spi0_0_ss1),
+    ZYNQ_PINCTRL_GRP(spi0_0_ss2),
+    ZYNQ_PINCTRL_GRP(spi0_1),
+    ZYNQ_PINCTRL_GRP(spi0_1_ss0),
+    ZYNQ_PINCTRL_GRP(spi0_1_ss1),
+    ZYNQ_PINCTRL_GRP(spi0_1_ss2),
+    ZYNQ_PINCTRL_GRP(spi0_2),
+    ZYNQ_PINCTRL_GRP(spi0_2_ss0),
+    ZYNQ_PINCTRL_GRP(spi0_2_ss1),
+    ZYNQ_PINCTRL_GRP(spi0_2_ss2),
+    ZYNQ_PINCTRL_GRP(spi1_0),
+    ZYNQ_PINCTRL_GRP(spi1_0_ss0),
+    ZYNQ_PINCTRL_GRP(spi1_0_ss1),
+    ZYNQ_PINCTRL_GRP(spi1_0_ss2),
+    ZYNQ_PINCTRL_GRP(spi1_1),
+    ZYNQ_PINCTRL_GRP(spi1_1_ss0),
+    ZYNQ_PINCTRL_GRP(spi1_1_ss1),
+    ZYNQ_PINCTRL_GRP(spi1_1_ss2),
+    ZYNQ_PINCTRL_GRP(spi1_2),
+    ZYNQ_PINCTRL_GRP(spi1_2_ss0),
+    ZYNQ_PINCTRL_GRP(spi1_2_ss1),
+    ZYNQ_PINCTRL_GRP(spi1_2_ss2),
+    ZYNQ_PINCTRL_GRP(spi1_3),
+    ZYNQ_PINCTRL_GRP(spi1_3_ss0),
+    ZYNQ_PINCTRL_GRP(spi1_3_ss1),
+    ZYNQ_PINCTRL_GRP(spi1_3_ss2),
+    ZYNQ_PINCTRL_GRP(sdio0_0),
+    ZYNQ_PINCTRL_GRP(sdio0_1),
+    ZYNQ_PINCTRL_GRP(sdio0_2),
+    ZYNQ_PINCTRL_GRP(sdio1_0),
+    ZYNQ_PINCTRL_GRP(sdio1_1),
+    ZYNQ_PINCTRL_GRP(sdio1_2),
+    ZYNQ_PINCTRL_GRP(sdio1_3),
+    ZYNQ_PINCTRL_GRP(sdio0_emio_wp),
+    ZYNQ_PINCTRL_GRP(sdio0_emio_cd),
+    ZYNQ_PINCTRL_GRP(sdio1_emio_wp),
+    ZYNQ_PINCTRL_GRP(sdio1_emio_cd),
+    ZYNQ_PINCTRL_GRP(smc0_nor),
+    ZYNQ_PINCTRL_GRP(smc0_nor_cs1),
+    ZYNQ_PINCTRL_GRP(smc0_nor_addr25),
+    ZYNQ_PINCTRL_GRP(smc0_nand),
+    ZYNQ_PINCTRL_GRP(smc0_nand8),
+    ZYNQ_PINCTRL_GRP(can0_0),
+    ZYNQ_PINCTRL_GRP(can0_1),
+    ZYNQ_PINCTRL_GRP(can0_2),
+    ZYNQ_PINCTRL_GRP(can0_3),
+    ZYNQ_PINCTRL_GRP(can0_4),
+    ZYNQ_PINCTRL_GRP(can0_5),
+    ZYNQ_PINCTRL_GRP(can0_6),
+    ZYNQ_PINCTRL_GRP(can0_7),
+    ZYNQ_PINCTRL_GRP(can0_8),
+    ZYNQ_PINCTRL_GRP(can0_9),
+    ZYNQ_PINCTRL_GRP(can0_10),
+    ZYNQ_PINCTRL_GRP(can1_0),
+    ZYNQ_PINCTRL_GRP(can1_1),
+    ZYNQ_PINCTRL_GRP(can1_2),
+    ZYNQ_PINCTRL_GRP(can1_3),
+    ZYNQ_PINCTRL_GRP(can1_4),
+    ZYNQ_PINCTRL_GRP(can1_5),
+    ZYNQ_PINCTRL_GRP(can1_6),
+    ZYNQ_PINCTRL_GRP(can1_7),
+    ZYNQ_PINCTRL_GRP(can1_8),
+    ZYNQ_PINCTRL_GRP(can1_9),
+    ZYNQ_PINCTRL_GRP(can1_10),
+    ZYNQ_PINCTRL_GRP(can1_11),
+    ZYNQ_PINCTRL_GRP(uart0_0),
+    ZYNQ_PINCTRL_GRP(uart0_1),
+    ZYNQ_PINCTRL_GRP(uart0_2),
+    ZYNQ_PINCTRL_GRP(uart0_3),
+    ZYNQ_PINCTRL_GRP(uart0_4),
+    ZYNQ_PINCTRL_GRP(uart0_5),
+    ZYNQ_PINCTRL_GRP(uart0_6),
+    ZYNQ_PINCTRL_GRP(uart0_7),
+    ZYNQ_PINCTRL_GRP(uart0_8),
+    ZYNQ_PINCTRL_GRP(uart0_9),
+    ZYNQ_PINCTRL_GRP(uart0_10),
+    ZYNQ_PINCTRL_GRP(uart1_0),
+    ZYNQ_PINCTRL_GRP(uart1_1),
+    ZYNQ_PINCTRL_GRP(uart1_2),
+    ZYNQ_PINCTRL_GRP(uart1_3),
+    ZYNQ_PINCTRL_GRP(uart1_4),
+    ZYNQ_PINCTRL_GRP(uart1_5),
+    ZYNQ_PINCTRL_GRP(uart1_6),
+    ZYNQ_PINCTRL_GRP(uart1_7),
+    ZYNQ_PINCTRL_GRP(uart1_8),
+    ZYNQ_PINCTRL_GRP(uart1_9),
+    ZYNQ_PINCTRL_GRP(uart1_10),
+    ZYNQ_PINCTRL_GRP(uart1_11),
+    ZYNQ_PINCTRL_GRP(i2c0_0),
+    ZYNQ_PINCTRL_GRP(i2c0_1),
+    ZYNQ_PINCTRL_GRP(i2c0_2),
+    ZYNQ_PINCTRL_GRP(i2c0_3),
+    ZYNQ_PINCTRL_GRP(i2c0_4),
+    ZYNQ_PINCTRL_GRP(i2c0_5),
+    ZYNQ_PINCTRL_GRP(i2c0_6),
+    ZYNQ_PINCTRL_GRP(i2c0_7),
+    ZYNQ_PINCTRL_GRP(i2c0_8),
+    ZYNQ_PINCTRL_GRP(i2c0_9),
+    ZYNQ_PINCTRL_GRP(i2c0_10),
+    ZYNQ_PINCTRL_GRP(i2c1_0),
+    ZYNQ_PINCTRL_GRP(i2c1_1),
+    ZYNQ_PINCTRL_GRP(i2c1_2),
+    ZYNQ_PINCTRL_GRP(i2c1_3),
+    ZYNQ_PINCTRL_GRP(i2c1_4),
+    ZYNQ_PINCTRL_GRP(i2c1_5),
+    ZYNQ_PINCTRL_GRP(i2c1_6),
+    ZYNQ_PINCTRL_GRP(i2c1_7),
+    ZYNQ_PINCTRL_GRP(i2c1_8),
+    ZYNQ_PINCTRL_GRP(i2c1_9),
+    ZYNQ_PINCTRL_GRP(i2c1_10),
+    ZYNQ_PINCTRL_GRP(ttc0_0),
+    ZYNQ_PINCTRL_GRP(ttc0_1),
+    ZYNQ_PINCTRL_GRP(ttc0_2),
+    ZYNQ_PINCTRL_GRP(ttc1_0),
+    ZYNQ_PINCTRL_GRP(ttc1_1),
+    ZYNQ_PINCTRL_GRP(ttc1_2),
+    ZYNQ_PINCTRL_GRP(swdt0_0),
+    ZYNQ_PINCTRL_GRP(swdt0_1),
+    ZYNQ_PINCTRL_GRP(swdt0_2),
+    ZYNQ_PINCTRL_GRP(swdt0_3),
+    ZYNQ_PINCTRL_GRP(swdt0_4),
+    ZYNQ_PINCTRL_GRP(gpio0_0),
+    ZYNQ_PINCTRL_GRP(gpio0_1),
+    ZYNQ_PINCTRL_GRP(gpio0_2),
+    ZYNQ_PINCTRL_GRP(gpio0_3),
+    ZYNQ_PINCTRL_GRP(gpio0_4),
+    ZYNQ_PINCTRL_GRP(gpio0_5),
+    ZYNQ_PINCTRL_GRP(gpio0_6),
+    ZYNQ_PINCTRL_GRP(gpio0_7),
+    ZYNQ_PINCTRL_GRP(gpio0_8),
+    ZYNQ_PINCTRL_GRP(gpio0_9),
+    ZYNQ_PINCTRL_GRP(gpio0_10),
+    ZYNQ_PINCTRL_GRP(gpio0_11),
+    ZYNQ_PINCTRL_GRP(gpio0_12),
+    ZYNQ_PINCTRL_GRP(gpio0_13),
+    ZYNQ_PINCTRL_GRP(gpio0_14),
+    ZYNQ_PINCTRL_GRP(gpio0_15),
+    ZYNQ_PINCTRL_GRP(gpio0_16),
+    ZYNQ_PINCTRL_GRP(gpio0_17),
+    ZYNQ_PINCTRL_GRP(gpio0_18),
+    ZYNQ_PINCTRL_GRP(gpio0_19),
+    ZYNQ_PINCTRL_GRP(gpio0_20),
+    ZYNQ_PINCTRL_GRP(gpio0_21),
+    ZYNQ_PINCTRL_GRP(gpio0_22),
+    ZYNQ_PINCTRL_GRP(gpio0_23),
+    ZYNQ_PINCTRL_GRP(gpio0_24),
+    ZYNQ_PINCTRL_GRP(gpio0_25),
+    ZYNQ_PINCTRL_GRP(gpio0_26),
+    ZYNQ_PINCTRL_GRP(gpio0_27),
+    ZYNQ_PINCTRL_GRP(gpio0_28),
+    ZYNQ_PINCTRL_GRP(gpio0_29),
+    ZYNQ_PINCTRL_GRP(gpio0_30),
+    ZYNQ_PINCTRL_GRP(gpio0_31),
+    ZYNQ_PINCTRL_GRP(gpio0_32),
+    ZYNQ_PINCTRL_GRP(gpio0_33),
+    ZYNQ_PINCTRL_GRP(gpio0_34),
+    ZYNQ_PINCTRL_GRP(gpio0_35),
+    ZYNQ_PINCTRL_GRP(gpio0_36),
+    ZYNQ_PINCTRL_GRP(gpio0_37),
+    ZYNQ_PINCTRL_GRP(gpio0_38),
+    ZYNQ_PINCTRL_GRP(gpio0_39),
+    ZYNQ_PINCTRL_GRP(gpio0_40),
+    ZYNQ_PINCTRL_GRP(gpio0_41),
+    ZYNQ_PINCTRL_GRP(gpio0_42),
+    ZYNQ_PINCTRL_GRP(gpio0_43),
+    ZYNQ_PINCTRL_GRP(gpio0_44),
+    ZYNQ_PINCTRL_GRP(gpio0_45),
+    ZYNQ_PINCTRL_GRP(gpio0_46),
+    ZYNQ_PINCTRL_GRP(gpio0_47),
+    ZYNQ_PINCTRL_GRP(gpio0_48),
+    ZYNQ_PINCTRL_GRP(gpio0_49),
+    ZYNQ_PINCTRL_GRP(gpio0_50),
+    ZYNQ_PINCTRL_GRP(gpio0_51),
+    ZYNQ_PINCTRL_GRP(gpio0_52),
+    ZYNQ_PINCTRL_GRP(gpio0_53),
+    ZYNQ_PINCTRL_GRP(usb0_0),
+    ZYNQ_PINCTRL_GRP(usb1_0),
+};
+
+static const char * const ethernet0_groups[] = {"ethernet0_0_grp"};
+static const char * const ethernet1_groups[] = {"ethernet1_0_grp"};
+static const char * const usb0_groups[] = {"usb0_0_grp"};
+static const char * const usb1_groups[] = {"usb1_0_grp"};
+static const char * const mdio0_groups[] = {"mdio0_0_grp"};
+static const char * const mdio1_groups[] = {"mdio1_0_grp"};
+static const char * const qspi0_groups[] = {"qspi0_0_grp"};
+static const char * const qspi1_groups[] = {"qspi1_0_grp"};
+static const char * const qspi_fbclk_groups[] = {"qspi_fbclk_grp"};
+static const char * const qspi_cs1_groups[] = {"qspi_cs1_grp"};
+static const char * const spi0_groups[] = {"spi0_0_grp", "spi0_1_grp", "spi0_2_grp"};
+static const char * const spi1_groups[] = {"spi1_0_grp", "spi1_1_grp", "spi1_2_grp", "spi1_3_grp"};
+
+static const char * const spi0_ss_groups[] = {"spi0_0_ss0_grp", "spi0_0_ss1_grp", "spi0_0_ss2_grp",
+                                              "spi0_1_ss0_grp", "spi0_1_ss1_grp", "spi0_1_ss2_grp",
+                                              "spi0_2_ss0_grp", "spi0_2_ss1_grp", "spi0_2_ss2_grp"};
+
+static const char * const spi1_ss_groups[] = {"spi1_0_ss0_grp", "spi1_0_ss1_grp", "spi1_0_ss2_grp",
+                                              "spi1_1_ss0_grp", "spi1_1_ss1_grp", "spi1_1_ss2_grp",
+                                              "spi1_2_ss0_grp", "spi1_2_ss1_grp", "spi1_2_ss2_grp",
+                                              "spi1_3_ss0_grp", "spi1_3_ss1_grp", "spi1_3_ss2_grp"};
+
+static const char * const sdio0_groups[] = {"sdio0_0_grp", "sdio0_1_grp", "sdio0_2_grp"};
+static const char * const sdio1_groups[] = {"sdio1_0_grp", "sdio1_1_grp", "sdio1_2_grp"};
+static const char * const sdio0_pc_groups[] = {"gpio0_0_grp", "gpio0_2_grp", "gpio0_4_grp", "gpio0_6_grp",
+                                               "gpio0_8_grp", "gpio0_10_grp", "gpio0_12_grp", "gpio0_14_grp",
+                                               "gpio0_16_grp", "gpio0_18_grp", "gpio0_20_grp", "gpio0_22_grp",
+                                               "gpio0_24_grp", "gpio0_26_grp", "gpio0_28_grp", "gpio0_30_grp",
+                                               "gpio0_32_grp", "gpio0_34_grp", "gpio0_36_grp", "gpio0_38_grp",
+                                               "gpio0_40_grp", "gpio0_42_grp", "gpio0_44_grp", "gpio0_46_grp",
+                                               "gpio0_48_grp", "gpio0_50_grp", "gpio0_52_grp"};
+
+static const char * const sdio1_pc_groups[] = {"gpio0_1_grp", "gpio0_3_grp", "gpio0_5_grp", "gpio0_7_grp",
+                                              "gpio0_9_grp", "gpio0_11_grp", "gpio0_13_grp", "gpio0_15_grp",
+                                              "gpio0_17_grp", "gpio0_19_grp", "gpio0_21_grp", "gpio0_23_grp",
+                                              "gpio0_25_grp", "gpio0_27_grp", "gpio0_29_grp", "gpio0_31_grp",
+                                              "gpio0_33_grp", "gpio0_35_grp", "gpio0_37_grp", "gpio0_39_grp",
+                                              "gpio0_41_grp", "gpio0_43_grp", "gpio0_45_grp", "gpio0_47_grp",
+                                              "gpio0_49_grp", "gpio0_51_grp", "gpio0_53_grp"};
+
+static const char * const sdio0_cd_groups[] = {"gpio0_0_grp", "gpio0_2_grp", "gpio0_4_grp", "gpio0_6_grp",
+                                               "gpio0_8_grp", "gpio0_10_grp", "gpio0_12_grp", "gpio0_14_grp",
+                                               "gpio0_16_grp", "gpio0_18_grp", "gpio0_20_grp", "gpio0_22_grp",
+                                               "gpio0_24_grp", "gpio0_26_grp", "gpio0_28_grp", "gpio0_30_grp",
+                                               "gpio0_32_grp", "gpio0_34_grp", "gpio0_36_grp", "gpio0_38_grp",
+                                               "gpio0_40_grp", "gpio0_42_grp", "gpio0_44_grp", "gpio0_46_grp",
+                                               "gpio0_48_grp", "gpio0_50_grp", "gpio0_52_grp",
+                                               "gpio0_1_grp", "gpio0_3_grp", "gpio0_5_grp", "gpio0_9_grp",
+                                               "gpio0_11_grp", "gpio0_13_grp", "gpio0_15_grp", "gpio0_17_grp",
+                                               "gpio0_19_grp", "gpio0_21_grp", "gpio0_23_grp", "gpio0_25_grp",
+                                               "gpio0_27_grp", "gpio0_29_grp", "gpio0_31_grp", "gpio0_33_grp",
+                                               "gpio0_35_grp", "gpio0_37_grp", "gpio0_39_grp", "gpio0_41_grp",
+                                               "gpio0_43_grp", "gpio0_45_grp", "gpio0_47_grp", "gpio0_49_grp",
+                                               "gpio0_51_grp", "gpio0_53_grp", "sdio0_emio_cd_grp"};
+
+static const char * const sdio0_wp_groups[] = {"gpio0_0_grp", "gpio0_2_grp", "gpio0_4_grp", "gpio0_6_grp",
+                                               "gpio0_8_grp", "gpio0_10_grp", "gpio0_12_grp", "gpio0_14_grp",
+                                               "gpio0_16_grp", "gpio0_18_grp", "gpio0_20_grp", "gpio0_22_grp",
+                                               "gpio0_24_grp", "gpio0_26_grp", "gpio0_28_grp", "gpio0_30_grp",
+                                               "gpio0_32_grp", "gpio0_34_grp", "gpio0_36_grp", "gpio0_38_grp",
+                                               "gpio0_40_grp", "gpio0_42_grp", "gpio0_44_grp", "gpio0_46_grp",
+                                               "gpio0_48_grp", "gpio0_50_grp", "gpio0_52_grp",
+                                               "gpio0_1_grp", "gpio0_3_grp", "gpio0_5_grp", "gpio0_9_grp",
+                                               "gpio0_11_grp", "gpio0_13_grp", "gpio0_15_grp", "gpio0_17_grp",
+                                               "gpio0_19_grp", "gpio0_21_grp", "gpio0_23_grp", "gpio0_25_grp",
+                                               "gpio0_27_grp", "gpio0_29_grp", "gpio0_31_grp", "gpio0_33_grp",
+                                               "gpio0_35_grp", "gpio0_37_grp", "gpio0_39_grp", "gpio0_41_grp",
+                                               "gpio0_43_grp", "gpio0_45_grp", "gpio0_47_grp", "gpio0_49_grp",
+                                               "gpio0_51_grp", "gpio0_53_grp", "sdio0_emio_wp_grp"};
+
+static const char * const sdio1_cd_groups[] = {"gpio0_0_grp", "gpio0_2_grp", "gpio0_4_grp", "gpio0_6_grp",
+                                               "gpio0_8_grp", "gpio0_10_grp", "gpio0_12_grp", "gpio0_14_grp",
+                                               "gpio0_16_grp", "gpio0_18_grp", "gpio0_20_grp", "gpio0_22_grp",
+                                               "gpio0_24_grp", "gpio0_26_grp", "gpio0_28_grp", "gpio0_30_grp",
+                                               "gpio0_32_grp", "gpio0_34_grp", "gpio0_36_grp", "gpio0_38_grp",
+                                               "gpio0_40_grp", "gpio0_42_grp", "gpio0_44_grp", "gpio0_46_grp",
+                                               "gpio0_48_grp", "gpio0_50_grp", "gpio0_52_grp",
+                                               "gpio0_1_grp", "gpio0_3_grp", "gpio0_5_grp", "gpio0_9_grp",
+                                               "gpio0_11_grp", "gpio0_13_grp", "gpio0_15_grp", "gpio0_17_grp",
+                                               "gpio0_19_grp", "gpio0_21_grp", "gpio0_23_grp", "gpio0_25_grp",
+                                               "gpio0_27_grp", "gpio0_29_grp", "gpio0_31_grp", "gpio0_33_grp",
+                                               "gpio0_35_grp", "gpio0_37_grp", "gpio0_39_grp", "gpio0_41_grp",
+                                               "gpio0_43_grp", "gpio0_45_grp", "gpio0_47_grp", "gpio0_49_grp",
+                                               "gpio0_51_grp", "gpio0_53_grp", "sdio1_emio_cd_grp"};
+
+static const char * const sdio1_wp_groups[] = {"gpio0_0_grp", "gpio0_2_grp", "gpio0_4_grp", "gpio0_6_grp",
+                                               "gpio0_8_grp", "gpio0_10_grp", "gpio0_12_grp", "gpio0_14_grp",
+                                               "gpio0_16_grp", "gpio0_18_grp", "gpio0_20_grp", "gpio0_22_grp",
+                                               "gpio0_24_grp", "gpio0_26_grp", "gpio0_28_grp", "gpio0_30_grp",
+                                               "gpio0_32_grp", "gpio0_34_grp", "gpio0_36_grp", "gpio0_38_grp",
+                                               "gpio0_40_grp", "gpio0_42_grp", "gpio0_44_grp", "gpio0_46_grp",
+                                               "gpio0_48_grp", "gpio0_50_grp", "gpio0_52_grp",
+                                               "gpio0_1_grp", "gpio0_3_grp", "gpio0_5_grp", "gpio0_9_grp",
+                                               "gpio0_11_grp", "gpio0_13_grp", "gpio0_15_grp", "gpio0_17_grp",
+                                               "gpio0_19_grp", "gpio0_21_grp", "gpio0_23_grp", "gpio0_25_grp",
+                                               "gpio0_27_grp", "gpio0_29_grp", "gpio0_31_grp", "gpio0_33_grp",
+                                               "gpio0_35_grp", "gpio0_37_grp", "gpio0_39_grp", "gpio0_41_grp",
+                                               "gpio0_43_grp", "gpio0_45_grp", "gpio0_47_grp", "gpio0_49_grp",
+                                               "gpio0_51_grp", "gpio0_53_grp", "sdio0_emio_wp_grp"};
+
+
+static const char * const smc0_nor_groups[] = {"smc0_nor_grp"};
+static const char * const smc0_nor_cs1_groups[] = {"smc0_nor_cs1_grp"};
+static const char * const smc0_nor_addr25_groups[] = {"smc0_nor_addr25_grp"};
+static const char * const smc0_nand_groups[] = {"smc0_nand_grp", "smc0_nand8_grp"};
+
+static const char * const can0_groups[] = {"can0_0_grp", "can0_1_grp", "can0_2_grp", "can0_3_grp",
+                                           "can0_4_grp", "can0_5_grp", "can0_6_grp", "can0_7_grp",
+                                           "can0_8_grp", "can0_9_grp", "can0_10_grp"};
+
+static const char * const can1_groups[] = {"can1_0_grp", "can1_1_grp", "can1_2_grp", "can1_3_grp",
+                                           "can1_4_grp", "can1_5_grp", "can1_6_grp", "can1_7_grp",
+                                           "can1_8_grp", "can1_9_grp", "can1_10_grp", "can1_11_grp"};
+
+static const char * const uart0_groups[] = {"uart0_0_grp", "uart0_1_grp", "uart0_2_grp", "uart0_3_grp",
+                                            "uart0_4_grp", "uart0_5_grp", "uart0_6_grp", "uart0_7_grp",
+                                            "uart0_8_grp", "uart0_9_grp", "uart0_10_grp"};
+
+static const char * const uart1_groups[] = {"uart1_0_grp", "uart1_1_grp", "uart1_2_grp", "uart1_3_grp",
+                                            "uart1_4_grp", "uart1_5_grp", "uart1_6_grp", "uart1_7_grp",
+                                            "uart1_8_grp", "uart1_9_grp", "uart1_10_grp", "uart1_11_grp"};
+
+static const char * const i2c0_groups[] = {"i2c0_0_grp", "i2c0_1_grp", "i2c0_2_grp", "i2c0_3_grp",
+                                           "i2c0_4_grp", "i2c0_5_grp", "i2c0_6_grp", "i2c0_7_grp",
+                                           "i2c0_8_grp", "i2c0_9_grp", "i2c0_10_grp"};
+
+static const char * const i2c1_groups[] = {"i2c1_0_grp", "i2c1_1_grp", "i2c1_2_grp", "i2c1_3_grp",
+                                           "i2c1_4_grp", "i2c1_5_grp", "i2c1_6_grp", "i2c1_7_grp",
+                                           "i2c1_8_grp", "i2c1_9_grp", "i2c1_10_grp"};
+
+static const char * const ttc0_groups[] = {"ttc0_0_grp", "ttc0_1_grp", "ttc0_2_grp"};
+static const char * const ttc1_groups[] = {"ttc1_0_grp", "ttc1_1_grp", "ttc1_2_grp"};
+static const char * const swdt0_groups[] = {"swdt0_0_grp", "swdt0_1_grp", "swdt0_2_grp", "swdt0_3_grp", "swdt0_4_grp"};
+static const char * const gpio0_groups[] = {"gpio0_0_grp", "gpio0_2_grp", "gpio0_4_grp", "gpio0_6_grp",
+                                               "gpio0_8_grp", "gpio0_10_grp", "gpio0_12_grp", "gpio0_14_grp",
+                                               "gpio0_16_grp", "gpio0_18_grp", "gpio0_20_grp", "gpio0_22_grp",
+                                               "gpio0_24_grp", "gpio0_26_grp", "gpio0_28_grp", "gpio0_30_grp",
+                                               "gpio0_32_grp", "gpio0_34_grp", "gpio0_36_grp", "gpio0_38_grp",
+                                               "gpio0_40_grp", "gpio0_42_grp", "gpio0_44_grp", "gpio0_46_grp",
+                                               "gpio0_48_grp", "gpio0_50_grp", "gpio0_52_grp",
+                                               "gpio0_1_grp", "gpio0_3_grp", "gpio0_5_grp", "gpio0_7_grp", "gpio0_9_grp",
+                                               "gpio0_11_grp", "gpio0_13_grp", "gpio0_15_grp", "gpio0_17_grp",
+                                               "gpio0_19_grp", "gpio0_21_grp", "gpio0_23_grp", "gpio0_25_grp",
+                                               "gpio0_27_grp", "gpio0_29_grp", "gpio0_31_grp", "gpio0_33_grp",
+                                               "gpio0_35_grp", "gpio0_37_grp", "gpio0_39_grp", "gpio0_41_grp",
+                                               "gpio0_43_grp", "gpio0_45_grp", "gpio0_47_grp", "gpio0_49_grp",
+                                               "gpio0_51_grp", "gpio0_53_grp"};
+
+#define ZYNQ_PINMUX_FUNCTION(fname, mval)   \
+    [ZYNQ_PINMUX_##fname] = {               \
+            .name = #fname,                  \
+            .groups = fname##_groups,        \
+            .ngroups = ARRAY_SIZE(fname##_groups),  \
+            .mux_val = mval,                \
+    }
+
+#define ZYNQ_PINMUX_FUNCTION_MUX(fname, mval, offset, mask, shift)  \
+    [ZYNQ_PINMUX_##fname] = {               \
+            .name = #fname,                 \
+            .groups = fname##_groups,       \
+            .ngroups = ARRAY_SIZE(fname##_groups),  \
+            .mux_val = mval,                \
+            .mux    = offset,               \
+            .mux_mask = mask,               \
+            .mux_shift = shift,             \
+    }
+
+#define ZYNQ_SDIO_WP_SHIFT  0
+#define ZYNQ_SDIO_WP_MASK   (0x3f   << ZYNQ_SDIO_WP_SHIFT)
+#define ZYNQ_SDIO_CD_SHIFT  16
+#define ZYNQ_SDIO_CD_MASK   (0x3f   << ZYNQ_SDIO_CD_SHIFT)
+
+static const struct zynq_pinmux_function zynq_pinmux_functions[] = {
+    ZYNQ_PINMUX_FUNCTION(ethernet0, 1),
+    ZYNQ_PINMUX_FUNCTION(ethernet1, 1),
+    ZYNQ_PINMUX_FUNCTION(usb0, 2),
+    ZYNQ_PINMUX_FUNCTION(usb1, 2),
+    ZYNQ_PINMUX_FUNCTION(mdio0, 0x40),
+    ZYNQ_PINMUX_FUNCTION(mdio1, 0x50),
+    ZYNQ_PINMUX_FUNCTION(qspi0, 1),
+    ZYNQ_PINMUX_FUNCTION(qspi1, 1),
+    ZYNQ_PINMUX_FUNCTION(qspi_fbclk, 1),
+    ZYNQ_PINMUX_FUNCTION(qspi_cs1, 1),
+    ZYNQ_PINMUX_FUNCTION(spi0, 0x50),
+    ZYNQ_PINMUX_FUNCTION(spi1, 0x50),
+    ZYNQ_PINMUX_FUNCTION(spi0_ss, 0x50),
+    ZYNQ_PINMUX_FUNCTION(spi1_ss, 0x50),
+    ZYNQ_PINMUX_FUNCTION(sdio0, 0x40),
+    ZYNQ_PINMUX_FUNCTION(sdio0_pc, 0xc),
+    ZYNQ_PINMUX_FUNCTION_MUX(sdio0_wp, 0, 0x130, ZYNQ_SDIO_WP_MASK, ZYNQ_SDIO_WP_SHIFT),
+    ZYNQ_PINMUX_FUNCTION_MUX(sdio0_cd, 0, 0x130, ZYNQ_SDIO_CD_MASK, ZYNQ_SDIO_CD_SHIFT),
+    ZYNQ_PINMUX_FUNCTION(sdio1, 0x40),
+    ZYNQ_PINMUX_FUNCTION(sdio1_pc, 0xc),
+    ZYNQ_PINMUX_FUNCTION_MUX(sdio1_wp, 0, 0x134, ZYNQ_SDIO_WP_MASK, ZYNQ_SDIO_WP_SHIFT),
+    ZYNQ_PINMUX_FUNCTION_MUX(sdio1_cd, 0, 0x134, ZYNQ_SDIO_CD_MASK, ZYNQ_SDIO_CD_SHIFT),
+    ZYNQ_PINMUX_FUNCTION(smc0_nor, 4),
+    ZYNQ_PINMUX_FUNCTION(smc0_nor_cs1, 8),
+    ZYNQ_PINMUX_FUNCTION(smc0_nor_addr25, 4),
+    ZYNQ_PINMUX_FUNCTION(smc0_nand, 8),
+    ZYNQ_PINMUX_FUNCTION(can0, 0x10),
+    ZYNQ_PINMUX_FUNCTION(can1, 0x10),
+    ZYNQ_PINMUX_FUNCTION(uart0, 0x70),
+    ZYNQ_PINMUX_FUNCTION(uart1, 0x70),
+    ZYNQ_PINMUX_FUNCTION(i2c0, 0x20),
+    ZYNQ_PINMUX_FUNCTION(i2c1, 0x20),
+    ZYNQ_PINMUX_FUNCTION(ttc0, 0x60),
+    ZYNQ_PINMUX_FUNCTION(ttc1, 0x60),
+    ZYNQ_PINMUX_FUNCTION(swdt0, 0x30),
+    ZYNQ_PINMUX_FUNCTION(gpio0, 0),
+};
+
+static int zynq_pinctrl_probe(struct udevice *dev)
+{
+    struct zynq_pinctrl_priv *priv = dev_get_priv(dev);
+
+    priv->offset = dev_read_addr(dev);
+    priv->syscon_base = ZYNQ_SYS_CTRL_BASEADDR;
+    priv->groups = zynq_pinctrl_groups;
+    priv->ngroups = ARRAY_SIZE(zynq_pinctrl_groups);
+    priv->funcs = zynq_pinmux_functions;
+    priv->nfuncs = ARRAY_SIZE(zynq_pinmux_functions);
+    priv->pins = zynq_pins;
+    priv->npins = ARRAY_SIZE(zynq_pins);
+
+    return 0;
+}
+
+static int zynq_pinctrl_get_pins_count(struct udevice *dev)
+{
+    struct zynq_pinctrl_priv *priv = dev_get_priv(dev);
+    return priv->npins;
+}
+
+static const char *zynq_pinctrl_get_pin_name(struct udevice *dev, unsigned int selector)
+{
+    struct zynq_pinctrl_priv *priv = dev_get_priv(dev);
+    return selector > priv->npins ? NULL : priv->pins[selector].name;
+}
+
+static const char *zynq_pinctrl_get_function_name(struct udevice *dev, unsigned int selecotr)
+{
+    struct zynq_pinctrl_priv *priv = dev_get_priv(dev);
+    return selecotr > priv->nfuncs ? NULL : priv->funcs[selecotr].name;
+}
+
+static int zynq_pinctrl_get_function_count(struct udevice *dev)
+{
+    struct zynq_pinctrl_priv *priv = dev_get_priv(dev);
+    return priv->nfuncs;
+}
+
+static int zynq_pinmux_group_set(struct udevice *dev, unsigned grp_selector, unsigned func_selector)
+{
+    struct zynq_pinctrl_priv *priv = dev_get_priv(dev);
+    const struct zynq_pinctrl_group *group = &priv->groups[grp_selector];
+    const struct zynq_pinmux_function *function = &priv->funcs[func_selector];
+
+    zynq_slcr_unlock();
+
+    if (func_selector == ZYNQ_PINMUX_sdio0_cd || func_selector == ZYNQ_PINMUX_sdio0_wp) {
+        u32 reg = readl(priv->syscon_base + priv->offset + function->mux);
+        
+        reg &= ~function->mux_mask;
+        reg |= group->pins[0] << function->mux_shift;
+
+        writel(reg, priv->syscon_base + priv->offset + function->mux);
+    } else {
+        for (int i = 0; i < group->npins; i++) {
+            unsigned int pin = group->pins[i];
+            u32 reg, addr = priv->offset + (4 * pin);
+            reg = readl(priv->syscon_base + addr);
+
+            reg &= ~ZYNQ_PINMUX_MUX_MASK;
+            reg |= function->mux_val << ZYNQ_PINMUX_MUX_SHIFT;
+
+            writel(reg, priv->syscon_base + addr);
+        }
+    }
+
+    zynq_slcr_lock();
+
+    return 0;
+}
+
+static int zynq_pinmux_set(struct udevice *dev, unsigned pin_selector, unsigned func_selector)
+{
+    struct zynq_pinctrl_priv *priv = dev_get_priv(dev);
+    const struct zynq_pinmux_function *func = &priv->funcs[func_selector];
+    const struct zynq_pinctrl_group *group;
+
+    for (int i = 0; i < priv->ngroups; i++) {
+        group = &priv->groups[i];
+        for (int j = 0; j < group->npins; j++) {
+            if (group->pins[j] == pin_selector) {
+                for (int k = 0; k < func->ngroups; k++) {
+                    if (!strcmp(func->groups[i], group->name))
+                        goto found;
+                }
+            }
+        }
+    }
+
+    return -1;
+
+found:
+    zynq_slcr_unlock();
+    if (func_selector == ZYNQ_PINMUX_sdio0_cd || func_selector == ZYNQ_PINMUX_sdio0_wp) {
+        u32 reg = readl(priv->syscon_base + func->mux);
+        reg &= ~func->mux_mask;
+        reg |= group->pins[0] << func->mux_shift;
+        writel(reg, priv->syscon_base + priv->offset + func->mux);
+    } else {
+        u32 reg, addr = priv->offset + (4 * pin_selector);
+        reg = readl(priv->syscon_base + addr);
+        reg &= ZYNQ_PINMUX_MUX_MASK;
+        reg |= func->mux_val << ZYNQ_PINMUX_MUX_SHIFT;
+        writel(reg, priv->syscon_base + addr);
+    }
+    zynq_slcr_lock();
+
+    return 0;
+}
+
+static int zynq_pinctrl_get_groups_count(struct udevice *dev)
+{
+    struct zynq_pinctrl_priv *priv = dev_get_priv(dev);
+    return priv->ngroups;
+}
+
+static const char *zynq_pinctrl_get_group_name(struct udevice *dev, unsigned selector)
+{
+    struct zynq_pinctrl_priv *priv = dev_get_priv(dev);
+    return priv->groups[selector].name;
+}
+
+static const struct pinconf_param zynq_conf_params[] = {
+    {"output-disable", PIN_CONFIG_OUTPUT_ENABLE, 0 },
+    {"output-enable", PIN_CONFIG_OUTPUT_ENABLE, 1},
+    {"output-high", PIN_CONFIG_OUTPUT, 1},
+    {"output-low", PIN_CONFIG_OUTPUT, 0},
+    {"bias-pull-up", PIN_CONFIG_BIAS_PULL_UP, 1},
+    {"bias-pull-down", PIN_CONFIG_BIAS_PULL_DOWN, 1},
+    {"slew-rate", PIN_CONFIG_SLEW_RATE, 0 },
+    {"power-source", PIN_CONFIG_POWER_SOURCE, 0 },
+    {"bias-high-impedance", PIN_CONFIG_BIAS_HIGH_IMPEDANCE, 0 },
+};
+
+static int zynq_pinconf_set(struct udevice *dev, unsigned pin, unsigned param, unsigned int val)
+{
+    struct zynq_pinctrl_priv *priv = dev_get_priv(dev);
+    u32 reg, addr = priv->offset + (4 * pin);
+    int ret = 0;
+
+    zynq_slcr_unlock();
+    reg = readl(priv->syscon_base + addr);
+    switch(param) {
+        case PIN_CONFIG_OUTPUT_ENABLE:
+            break;
+        case PIN_CONFIG_OUTPUT:
+            break;
+        case PIN_CONFIG_BIAS_PULL_UP: 
+            reg &= ~(1 << 12);
+            reg |= val << 12;   
+            break;
+        case PIN_CONFIG_BIAS_PULL_DOWN:
+            reg &= ~(1 << 12);
+            break;
+        case PIN_CONFIG_SLEW_RATE:
+            if (val > 1) {
+                ret = -EINVAL;
+                goto out;
+            }
+            reg &= ~(1 << 8);
+            reg |= val << 8;
+            break;
+        case PIN_CONFIG_POWER_SOURCE:
+
+            if (val > 7) {
+                ret = -EINVAL;
+                goto out;
+            }
+
+            reg &= ~(7 << 9);
+            reg |= val << 9;
+            break;
+        case PIN_CONFIG_BIAS_HIGH_IMPEDANCE:
+            if (val > 1) {
+                ret = -EINVAL;
+                goto out;
+            }
+            reg &= ~(1 << 0);
+            reg |= val << 0;;         
+            break;
+        default:
+            ret = -EINVAL;
+    }
+    writel(reg, priv->syscon_base + addr);
+out:
+    zynq_slcr_lock();
+    return ret;
+}
+
+static int zynq_pinconf_group_set(struct udevice *dev, unsigned group_selector, unsigned param, unsigned arg)
+{
+    struct zynq_pinctrl_priv *priv = dev_get_priv(dev);
+    const struct zynq_pinctrl_group *group = &priv->groups[group_selector];
+
+    for (int i = 0; i < group->npins; i++)
+        zynq_pinconf_set(dev, group->pins[i], param, arg);
+
+    return 0;
+}
+
+static int zynq_pinctrl_get_pin_muxing(struct udevice *dev, unsigned selector, char *buf, int size)
+{
+    struct zynq_pinctrl_priv *priv = dev_get_priv(dev);
+    u32 reg, addr = priv->offset + selector * 4;
+    u32 len = 0;
+    u8 io_type;
+
+    reg = readl(priv->syscon_base + addr);
+
+    len = snprintf(buf, size - len, "disable-rcvr:%d ", reg & (1 << 13));
+
+    len += snprintf(buf + len, size - len, "%s ", reg & ( 1 << 12) ? "PULL-UP" : "PULL-DOWN");
+
+    io_type = reg & (7 << 9);
+
+    switch(io_type) {
+        case 1:
+            len += snprintf(buf + len, size -len, "LVCOMS18 ");
+            break;
+        case 2:
+            len += snprintf(buf + len, size - len, "LVCOMS25 ");
+            break;
+        case 3:
+            len += snprintf(buf + len , size - len, "LVCOMS33 ");
+            break;
+        case 4:
+            len += snprintf(buf + len, size - len, "HSTL ");
+            break;
+        default:
+            len += snprintf(buf + len, size - len, "Reserved ");
+            break;
+    }
+
+    len += snprintf(buf + len, size - len, "%s ", reg & (1 << 8) ? "fast" : "slow");
+
+    len += snprintf(buf + len, size - len, "hiz-%s ", reg & (1 << 0) ? "yes" : "no");
+
+    return 0;
+}
+
+static struct pinctrl_ops zynq_pinctrl_ops = {
+    .get_pins_count = zynq_pinctrl_get_pins_count,
+    .get_pin_name = zynq_pinctrl_get_pin_name,
+    .get_function_name = zynq_pinctrl_get_function_name,
+    .get_functions_count = zynq_pinctrl_get_function_count,
+    .get_groups_count = zynq_pinctrl_get_groups_count,
+    .get_group_name = zynq_pinctrl_get_group_name,
+    .get_pin_muxing = zynq_pinctrl_get_pin_muxing,
+    .pinmux_group_set = zynq_pinmux_group_set,
+    .pinmux_set = zynq_pinmux_set,
+    .pinconf_params = zynq_conf_params,
+    .pinconf_num_params = ARRAY_SIZE(zynq_conf_params),
+    .pinconf_set = zynq_pinconf_set,
+    .pinconf_group_set = zynq_pinconf_group_set,
+    .set_state = pinctrl_generic_set_state,
+};
+
+static const struct udevice_id zynq_pinctrl_ids[] = {
+    { .compatible = "xlnx,pinctrl-zynq"},
+    {}
+};
+
+
+U_BOOT_DRIVER(pinctrl_zynq) = {
+    .name   = "zynq-pinctrl",
+    .id     = UCLASS_PINCTRL,
+    .priv_auto  = sizeof(struct zynq_pinctrl_priv),
+    .ops    = &zynq_pinctrl_ops,
+    .probe  = zynq_pinctrl_probe,
+    .of_match = zynq_pinctrl_ids,
+};
Index: b/arch/arm/mach-zynq/include/mach/sys_proto.h
===================================================================
--- a/arch/arm/mach-zynq/include/mach/sys_proto.h
+++ b/arch/arm/mach-zynq/include/mach/sys_proto.h
@@ -16,5 +16,6 @@ extern u32 zynq_slcr_get_idcode(void);
 extern int zynq_slcr_get_mio_pin_status(const char *periph);
 extern void zynq_ddrc_init(void);
 extern unsigned int zynq_get_silicon_version(void);
+extern int zynq_slcr_set_mio_pin(const char *perih);
 
 #endif /* _SYS_PROTO_H_ */
